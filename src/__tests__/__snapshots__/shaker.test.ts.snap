// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`keeps objects as is 1`] = `
"const fill1 = (top = 0, left = 0, right = 0, bottom = 0) => ({
  position: 'absolute',
  top,
  right,
  bottom,
  left
});

const fill2 = (top = 0, left = 0, right = 0, bottom = 0) => {
  return {
    position: 'absolute',
    top,
    right,
    bottom,
    left
  };
};

const wrap = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap(() => fill1), wrap(() => fill2)];"
`;

exports[`keeps only code which is related to \`a\` 1`] = `
"const {
  whiteColor: color,
  anotherColor
} = require('…');

const a = color || anotherColor;
color.green = '#0f0';

const wrap = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap(() => a)];"
`;

exports[`keeps only code which is related to \`anotherColor\` 1`] = `
"const {
  anotherColor
} = require('…');

const wrap = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap(() => anotherColor)];"
`;

exports[`keeps only code which is related to \`color\` 1`] = `
"const {
  whiteColor: color
} = require('…');

color.green = '#0f0';

const wrap_1 = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap_1(() => color)];"
`;

exports[`shakes exports 1`] = `
"import { whiteColor as color } from '…';
const a = color;

const wrap = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap(() => a)];"
`;

exports[`shakes imports 1`] = `
"import { whiteColor as color } from '…';
import defaultColor from '…';

const wrap = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap(() => color), wrap(() => defaultColor)];"
`;

exports[`shakes sequence expression 1`] = `
"const color1 = (() => 'blue');
let local = '';
const color2 = (local = color1(), () => local);

const wrap = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap(() => color2)];"
`;

exports[`should keep member expression key 1`] = `
"const key = 'blue';
const obj = {
  blue: '#00F'
};
const blue = obj[key];

const wrap = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap(() => blue)];"
`;

exports[`should throw away any side effects 1`] = `
"const objects = {
  key: {
    fontSize: 12
  }
};

const foo = k => {
  const obj = objects[k];
  return obj;
};

const wrap = fn => {
  try {
    return fn();
  } catch (e) {
    return e;
  }
};

module.exports = [wrap(() => foo)];"
`;
